@page "/game/{id}"
@inject Data.IBowlingService GameSerice

@inject NavigationManager Navigation
<h3>Edit Game</h3>

<EditForm Model="@_game">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Id</label>
        <input id="id" class="form-control" name="id" value="@_game.Id" readonly />
    </div>
    <div class="form-group">
        <label>Name</label>
        <InputText id="name" class="form-control" @bind-Value="_game.Name" placeholder="game name" />
    </div>
    @foreach (var frame in _game.Frames)
    {
        <div class="form-group">
            <label>Frame @frame.Id.ToString()</label>
            @foreach (var shot in frame.Shots)
            {
                <InputText id="pinsKnocked" class="form-control" @bind-Value="shot.PinsKnockedDown" placeholder="pins knocked down" />
            }
        </div>
    }

    @*<button type="submit" class="btn btn-primary">Update</button>*@
    @*<button class="btn btn-primary" @onclick="@(e => Submit(e)">Update</button>*@
    <button class="btn btn-primary" @onclick="@(e => Submit(e))">Save</button>
    <button class="btn btn-danger" @onclick="@(e => Clear())">Clear</button>
    <br />
    @if (!string.IsNullOrEmpty(Message))
    {
        <ul class="validation-errors">
            <li class="validation-message">@Message</li>
        </ul>
    }
</EditForm>

@code {
    [Parameter]
    public string Id { get; set; }

    private Data.Game _game { get; set; }

    private string Message { get; set; }

    protected override void OnInitialized()
    {
        Clear();
    }

    private void Clear()
    {
        Message = string.Empty;
        if (!string.IsNullOrEmpty(Id) && Id == "0") _game = new Data.Game();
        else _game = GameSerice.GetGame(int.Parse(Id));
    }

    private void Submit(MouseEventArgs e)
    {
        Message = string.Empty;

        if (!IsValid(_game.Frames)) {
            Message = "Invalid Frames, please check and try again.";
            return;
        }


        if (_game.Id == 0) GameSerice.AddGame(_game);
        else GameSerice.UpdateGame(_game);


        Navigation.NavigateTo("/");
    }

    private bool IsValid(List<Data.Frame> frames) {

        bool isValid = false;
        foreach(var frame in frames)
        {
            List<Data.Shot> shots = frame.Shots;
            if (shots != null && shots.Count > 2)
            {
                if ((shots[0].Pins != 10 || (shots[0].Pins + shots[1].Pins) != 10) && shots[2].Pins == 0)
                {
                    return true;
                }
                else {
                    if ((shots[0].Pins + shots[1].Pins + shots[2].Pins) > 30)
                    {
                        return false;
                    }
                    else return true;
                }
            }
            else
            {
                if (shots[0].Pins + shots[1].Pins > 10) return false;
                else isValid = true;
            }
        }

        return isValid;
    }
}
